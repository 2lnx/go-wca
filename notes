- windowsでgoからオーディオを再生したい
  - portaudioのgoバインディングはあるので、それを使えば良いのでは?
  - プラットフォームはwindowsに限定しているのでMac/Linux対応は必要ない。
  - portaaudioのバインディングはcgo使っているので、可能であればピュアgoで書きたい
- 直接ホストOSのオーディオAPIを叩く方法を調べることに。
  - windows vistaでcore audio apiが導入された。
  - 以下の4つを総称してcore audio apiと呼ぶ。
  - MMDevice API ... スピーカーやマイクなどデバイスを操作するためのAPI
  - Windows Audio Session API ... 略してWASAPI(わさぴー)。音声信号のレンダリングやキャプチャを担当する。
  - Device Toporogy API ... スピーカーやマイクなどのデバイス同士がどのように接続されているのかを管理する。
  - Endpoint Volume API ... マスターの音量を管理する。
- core audio apiのサンプルコードを入手する。
  - windows 7 .net framework v4向けのSDKにサンプルコードがあった。
  - C++か...
  - 簡単そうなEndpoint Volume APIから触ってみる
  - しかし、C++のコードお読む必要がある
- Tutorials PointでC++について勉強
  - 大まかにC++は理解できた。
  - しかし、C++にはインターフェスという言語機能がある。
  - そもそも、C++で書かれたAPIがGoから利用できるのか?
- goからwindowsのdllを呼び出せるのかを調査
  - mattnさんが片付きでGoからDLLを呼び出すという記事を書いていた。ありがてぇ。
  - ついでにgo generateでdllを呼び出すコードを自動生成できることが判明
  - とりあえず、GoからC++で書かれたライブラリを利用できることが判明した。
- ひとまずかんたんなサンプルを実装してみることに。
  - https://github.com/moutend/using-dll-from-go
  - プロセスが起動しているカレントのパスを表示するというもの。
  - kernel32.dllに実装されている関数を呼び出すサンプルを作成。
  - 無事に動いた
- 再びEndpoint Volume APIを使うサンプルコードを調査
  - CoInitializeとCoCreate関数を使っている
  - C++の標準的な機能ではないらしい。
  - オブジェクトの初期化にはWindows専用の関数を使う必要がある。
- そもそもCOMとは?
  - COMというコーディングスタイル?に従ってAPIが実装されているらしい
  - 結局何なのかよくわからない。
  - とりあえずコードリーディングを続けることに。
- go-oleというものを発見
  - oleが何なのかはよくわからない
  - 例えばexcelとwordでプロセス間通信をするための規約のようなもの?
  - com.goの中でCoInitializeしているのを発見。
- C++のオブジェクトをgoから扱えるらしい。
- CoInitializeでcomの初期化をしてCoCreateでオブジェクトを生成する
  - guid.goによるとオブジェクトにはGUIDが割り当てられる
  - GUIDはIDLで生成される
  - ちなみに、mmdeviceapiのヘッダファイルとidlは`/Program Files/Microsoft SDKs/Windows/v7.1/Include`にある
  - たとえばMMDeviceくらすのGUIDはmmdevice.id:435に定義されていて`uuid(A95664D2-9614-4F35-A746-DE8DB63617E6)`となっている。
- go-oleではguidを含め諸々をgoで実装しているが、何をやっているのかさっぱりわからない
  - VisualC++の知識がないとコードが読めない予感
- go-oleを利用しているコードを調べればcomについての理解が深まるかも
- go-oleを利用している人を発見。
  - https://hnakamur.github.io/blog/2015/02/22/w32uiautomation/
  - この人はWindows Updateを自動化したらしい。
  - session.go:11に気になる部分が
  - unknown, err := oleutil.CreateObject("Microsoft.Update.Session")
- Microsoft.Update.Sessionという文字列が気になる
  - オブジェクトを指定するためのフォーマットが存在する?
  - https://msdn.microsoft.com/en-us/library/windows/desktop/aa386854(v=vs.85).aspx
  - MSDNのドキュメントでは単純にprogram identifierと呼んでいるだけで、文字列のフォーマットについての言及はない
- 引き続きgo-oleのコードリーディング
  - MSDNのドキュメントによるとIXXXはインターフェースの命名規則でプレフィックスとしてIをつけることになっている
  - インターフェースがC++の言語機能のインターフェースのことなのか、一般的な意味で使用するインターフェースのことなのかわからない。
  - 頻繁に登場するIUnknown、IDispatchとは何なのか
- IDispatch interface
  - Exposes objects, methods and properties to programming tools and other applications that support Automation. COM components implement the IDispatch interface to enable access by Automation clients, such as Visual Basic.
  - The IDispatch interface inherits from the IUnknown interface.
  - インターフェースはC++のインターフェースという意味で確定
- IDispatch経由で外部のプログラムからcomを操作できるらしい
- go-oleは自前でIUnknownとIDispatchを実装している
  - VTableが重要そう。
- VTableにはメソッドのアドレスが格納される。
  - syscall.Syscallでメソッドを呼び出すときには第一引数にそのメソッドが実装されているアドレスを、第３引数にはオブジェクト自身のアドレスを指定している。
  - おそらく、C++のオブジェクトは自分自身のアドレスとメソッドのアドレスを格納するポインタの集まりではないか。
  - なんとなく、全体像がわかってきた。
  - 見よう見まねでMMDevice APIを実装することに。
  - https://github.com/moutend/gwca
  - なんか動いているっぽい。
